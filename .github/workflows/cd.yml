# .github/workflows/cd.yml
name: Laravel CD Pipeline (Manual Deploy)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code # Tetap perlu untuk akses Dockerfile/konteks build di CI (walaupun tidak di CD)
        uses: actions/checkout@v4

      - name: Deploy Application Container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "--- Memulai Deployment di Server ---"

            echo "Logging into Docker Hub on EC2 instance..."
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            echo "Docker Hub login successful on EC2."

            # Pull image aplikasi "all-in-one" (sudah ada Nginx dan PHP-FPM)
            echo "Pulling latest all-in-one application Docker image: parisyashp31/guestbook-laravel:latest"
            docker pull parisyashp31/guestbook-laravel:latest

            # Pull image MySQL
            echo "Pulling MySQL Docker image: mysql:8.0"
            docker pull mysql:8.0

            echo "Stopping and removing existing containers (if running)..."
            docker stop guestbook-app || true
            docker rm guestbook-app || true
            docker stop guestbook-db || true
            docker rm guestbook-db || true

            #membuat jaringan custom
            echo "Creating custom Docker network 'guestbook-network'..."
            docker network create guestbook-network || true

            # Jalankan container database
            echo "Running new database container named 'guestbook-db'..."
            docker run -d \
              --name guestbook-db \
              -p 3306:3306 \
              -e MYSQL_DATABASE=${{ secrets.DB_DATABASE }} \
              -e MYSQL_ROOT_PASSWORD=root_password \
              -e MYSQL_USER=${{ secrets.DB_USERNAME }} \
              -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} \
              mysql:8.0

            # Jalankan container aplikasi "all-in-one"
            echo "Running new all-in-one application container named 'guestbook-app'..."
            docker run -d \
              --name guestbook-app \
              --network guestbook-network \
              -p 80:80 \
              -e APP_NAME=Guestbook \
              -e APP_ENV=production \
              -e APP_DEBUG=false \
              -e APP_URL=http://${{ secrets.SSH_HOST }} \
              -e APP_KEY=${{ secrets.APP_KEY }} \
              -e DB_CONNECTION=mysql \
              -e DB_HOST=guestbook-db \
              -e DB_PORT=3306 \
              -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              parisyashp31/guestbook-laravel:latest

            # --- PENTING: Penunggu Database yang Lebih Robust ---
            echo "Menunggu database siap menerima koneksi..."
            ATTEMPTS=0
            MAX_ATTEMPTS=60 # Mencoba hingga 60 kali (total 60 detik)
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
                docker exec guestbook-db mysqladmin ping -h guestbook-db -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} --silent
                if [ $? -eq 0 ]; then
                    echo "Database sudah siap!"
                    break
                fi
                echo "Database belum siap, mencoba lagi dalam 1 detik... (Percobaan ke $((ATTEMPTS+1)))"
                sleep 1
                ATTEMPTS=$((ATTEMPTS+1))
            done

            # Jika keluar dari loop tanpa DB siap, berarti gagal
            if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
                echo "Error: Database tidak siap tepat waktu setelah $MAX_ATTEMPTS percobaan."
                exit 1
            fi
            # --- AKHIR PENUNGGU DATABASE ---

            echo "Running database migrations..."
            docker exec guestbook-app php artisan migrate --force

            echo "--- Deployment Selesai! ---"